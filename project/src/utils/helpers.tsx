import { UserProfile, Career } from '../types';

export const getTopCareers = (careers: Career[], profile: UserProfile, limit: number = 5): Career[] => {
  const scoredCareers = careers.map(career => {
    let score = 0;
    
    // Skills matching (40% weight)
    const skillMatches = career.requiredSkills.filter(skill => 
      profile.skills.some(userSkill => 
        userSkill.toLowerCase().includes(skill.toLowerCase()) ||
        skill.toLowerCase().includes(userSkill.toLowerCase())
      )
    ).length;
    score += (skillMatches / career.requiredSkills.length) * 40;
    
    // Interests matching (30% weight)
    const interestMatches = profile.interests.filter(interest =>
      career.description.toLowerCase().includes(interest.toLowerCase()) ||
      career.title.toLowerCase().includes(interest.toLowerCase()) ||
      career.category.toLowerCase().includes(interest.toLowerCase())
    ).length;
    score += (interestMatches / Math.max(profile.interests.length, 1)) * 30;
    
    // Subjects matching (20% weight)
    const subjectMatches = profile.subjects.filter(subject =>
      career.description.toLowerCase().includes(subject.toLowerCase()) ||
      career.title.toLowerCase().includes(subject.toLowerCase()) ||
      career.category.toLowerCase().includes(subject.toLowerCase())
    ).length;
    score += (subjectMatches / Math.max(profile.subjects.length, 1)) * 20;
    
    // Goals matching (10% weight)
    const goalMatches = profile.goals.filter(goal => {
      const goalLower = goal.toLowerCase();
      return (
        (goalLower.includes('high salary') && career.averageSalary.includes('$')) ||
        (goalLower.includes('remote') && career.remoteWork) ||
        (goalLower.includes('entry level') && career.entryLevel) ||
        (goalLower.includes('technology') && career.category === 'Technology') ||
        (goalLower.includes('healthcare') && career.category === 'Healthcare') ||
        (goalLower.includes('business') && career.category === 'Business')
      );
    }).length;
    score += (goalMatches / Math.max(profile.goals.length, 1)) * 10;
    
    return {
      ...career,
      matchScore: Math.round(Math.min(score, 100))
    };
  });
  
  return scoredCareers
    .sort((a, b) => b.matchScore - a.matchScore)
    .slice(0, limit);
};

export const downloadCareerPlan = (profile: UserProfile, careers: Career[]) => {
  const content = `
CAREER DISCOVERY PLAN
Generated on: ${new Date().toLocaleDateString()}

PERSONAL PROFILE
Name: ${profile.name}
Email: ${profile.email || 'Not provided'}
University: ${profile.university || 'Not provided'}
Graduation Year: ${profile.graduationYear || 'Not provided'}
Experience Level: ${profile.experienceLevel}

INTERESTS (${profile.interests.length} selected)
${profile.interests.map(interest => `• ${interest}`).join('\n')}

SKILLS (${profile.skills.length} identified)
${profile.skills.map(skill => `• ${skill}`).join('\n')}

ACADEMIC SUBJECTS (${profile.subjects.length} areas)
${profile.subjects.map(subject => `• ${subject}`).join('\n')}

CAREER GOALS (${profile.goals.length} objectives)
${profile.goals.map(goal => `• ${goal}`).join('\n')}

TOP CAREER RECOMMENDATIONS

${careers.map((career, index) => `
${index + 1}. ${career.title.toUpperCase()} (${career.matchScore}% match)
Category: ${career.category}
Description: ${career.description}
Average Salary: ${career.averageSalary}
Job Outlook: ${career.jobOutlook}
Remote Work: ${career.remoteWork ? 'Available' : 'Limited'}
Entry Level: ${career.entryLevel ? 'Yes' : 'Experience Required'}

Required Skills:
${career.requiredSkills.map(skill => `  • ${skill}`).join('\n')}

Learning Resources:
${career.learningPlatforms.map(platform => `  • ${platform.name} (${platform.price})`).join('\n')}
`).join('\n')}

NEXT STEPS
1. Research your top 3 career matches in detail
2. Connect with professionals in these fields
3. Start building relevant skills through online courses
4. Consider internships or volunteer opportunities
5. Update your resume to highlight matching skills

Generated by PathWise.AI Career Intelligence Platform
  `.trim();

  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `${profile.name.replace(/\s+/g, '_')}_Career_Plan.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};